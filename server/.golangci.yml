# golangci-lint configuration for FLE Server
# Backend-core feature development

# Configuration version for golangci-lint
version: 2

run:
  # Timeout for analysis
  timeout: 5m
  
  # Exit code when at least one issue was found
  issues-exit-code: 1
  
  # Include test files in analysis
  tests: true
  
  # List of build tags, all linters use it
  build-tags:
    - integration
    - unit

  # Which dirs to skip: issues from them won't be reported
  skip-dirs:
    - vendor
    - bin
    - .git
    - node_modules

  # Which files to skip: they will be analyzed, but issues from them won't be reported
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_gen\\.go$"

# Output configuration
output:
  # Colored output
  color: always
  
  # Print lines of code with issue
  print-issued-lines: true
  
  # Print linter name in the end of issue text
  print-linter-name: true
  
  # Make issues output unique by line
  uniq-by-line: true
  
  # Add a prefix to the output file references
  path-prefix: ""

# Linters configuration
linters-settings:
  # Errcheck: checking for unchecked errors
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`
    check-type-assertions: true
    # Report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`
    check-blank: true
    # List of functions to exclude from checking
    exclude-functions:
      - (*log.Logger).Print
      - (*log.Logger).Printf
      - (*log.Logger).Println

  # Gocyclo: cyclomatic complexity
  gocyclo:
    # Minimal code complexity to report
    min-complexity: 15

  # Gofmt: formatting
  gofmt:
    # Simplify code: gofmt with `-s` option
    simplify: true

  # Goimports: formatting with imports
  goimports:
    # Put imports beginning with prefix after 3rd-party packages
    local-prefixes: github.com/fle/server

  # Golint: style mistakes
  golint:
    # Minimal confidence for issues
    min-confidence: 0.8

  # Govet: suspicious constructs
  govet:
    # Report about shadowed variables
    check-shadowing: true
    # Settings per analyzer
    settings:
      printf:
        # Require printf-like functions to be named *f
        funcs:
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Infof
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf
          - (github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf

  # Lll: line length limit
  lll:
    # Max line length, lines longer will be reported
    line-length: 120

  # Maligned: struct alignment
  maligned:
    # Print struct with more effective memory layout or not
    suggest-new: true

  # Misspell: commonly misspelled English words
  misspell:
    # Correct spellings using locale preferences for US or UK
    locale: US
    # List of words to ignore
    ignore-words:
      - cancelled

  # Nakedret: naked returns in functions longer than N lines
  nakedret:
    # Make an issue if func has more lines of code than this setting
    max-func-lines: 30

  # Prealloc: slice preallocation
  prealloc:
    # XXX: we don't recommend using this linter before doing performance profiling
    # For most programs usage of prealloc will be a premature optimization
    simple: true
    range-loops: true # Report preallocation suggestions on range loops
    for-loops: false # Report preallocation suggestions on for loops

  # Unparam: unused parameters
  unparam:
    # Inspect exported functions
    check-exported: false

  # Unused: unused constants, variables, functions and types
  unused:
    # Mark all struct fields that have been written to as used
    field-writes-are-uses: true
    # Mark all exported identifiers as used
    exported-is-used: true

  # WSL: whitespace linter
  wsl:
    # See https://github.com/bombsimon/wsl/blob/master/doc/configuration.md for documentation of available settings
    # These are defaults
    strict-append: true
    allow-assign-and-call: true
    allow-assign-and-anything: false
    allow-multiline-assign: true
    force-case-trailing-whitespace: 0

  # Gosec: security audit
  gosec:
    # To select a subset of rules to run
    includes:
      - G201 # SQL query construction using format string
      - G202 # SQL query construction using string concatenation
      - G301 # Poor file permissions used when creating a directory
      - G302 # Poor file permissions used with chmod
      - G303 # Creating tempfile using a predictable path
      - G304 # File path provided as taint input
      - G305 # File traversal when extracting zip/tar archive
      - G401 # Detect the usage of DES, RC4, MD5 or SHA1
      - G402 # Look for bad TLS connection settings
      - G403 # Ensure minimum RSA key length of 2048 bits
      - G404 # Insecure random number source (rand)
      - G501 # Import blocklist: crypto/md5
      - G502 # Import blocklist: crypto/des
      - G503 # Import blocklist: crypto/rc4
      - G504 # Import blocklist: net/http/cgi
      - G505 # Import blocklist: crypto/sha1

  # Goconst: repeated strings that could be replaced by a constant
  goconst:
    # Minimal length of string constant
    min-len: 3
    # Minimum occurrences of constant string count to trigger issue
    min-occurrences: 2
    # Ignore test files
    ignore-tests: true

  # Gocritic: comprehensive Go source code linter
  gocritic:
    # Which checks should be enabled; can't be combined with 'disabled-checks'
    enabled-checks:
      - appendAssign
      - argOrder
      - assignOp
      - badCond
      - boolExprSimplify
      - builtinShadow
      - captLocal
      - caseOrder
      - codegenComment
      - commentedOutCode
      - commentedOutImport
      - defaultCaseOrder
      - deprecatedComment
      - docStub
      - dupArg
      - dupBranchBody
      - dupCase
      - dupSubExpr
      - elseif
      - emptyFallthrough
      - equalFold
      - flagDeref
      - flagName
      - hexLiteral
      - ifElseChain
      - importShadow
      - indexAlloc
      - initClause
      - methodExprCall
      - nilValReturn
      - octalLit
      - offBy1
      - paramTypeCombine
      - ptrToRefParam
      - rangeExprCopy
      - rangeValCopy
      - regexpMust
      - sloppyLen
      - stringXbytes
      - switchTrue
      - typeAssertChain
      - typeSwitchVar
      - typeUnparen
      - underef
      - unlambda
      - unnecessaryBlock
      - unslice
      - valSwap
      - wrapperFunc
      - yodaStyleExpr

    # Settings passed to gocritic
    settings:
      captLocal:
        # Whether to restrict checker to params only
        paramsOnly: true
      elseif:
        # Whether to skip balanced if-else pairs
        skipBalanced: true
      hugeParam:
        # Size in bytes that makes the warning trigger
        sizeThreshold: 80
      rangeExprCopy:
        # Size in bytes that makes the warning trigger
        sizeThreshold: 512
      rangeValCopy:
        # Size in bytes that makes the warning trigger
        sizeThreshold: 128
      tooManyResultsChecker:
        # Maximum number of results
        maxResults: 5
      truncateCmp:
        # Whether to skip int/uint/uintptr types
        skipArchDependent: true
      underef:
        # Whether to skip (*x).method() calls where x is a pointer receiver
        skipRecvDeref: true
      unnamedResult:
        # Whether to check exported functions
        checkExported: true

# Linters to enable/disable
linters:
  # Disable all linters as default is true
  disable-all: true
  
  # Enable specific linters
  enable:
    # Enabled by default linters:
    - errcheck     # Errcheck is a program for checking for unchecked errors in go programs
    # gosimple is deprecated - functionality moved to staticcheck
    - govet        # Vet examines Go source code and reports suspicious constructs
    - ineffassign  # Detects when assignments to existing variables are not used
    - staticcheck  # Staticcheck is a go vet on steroids, applying a ton of static analysis checks
    # typecheck is not a separate linter in recent versions - it's built into golangci-lint
    - unused       # Checks Go code for unused constants, variables, functions and types

    # Additional quality linters:
    - asasalint    # Check for pass []any as any in variadic func(...any)
    - asciicheck   # Simple linter to check that your code does not contain non-ASCII identifiers
    - bidichk      # Checks for dangerous unicode character sequences
    - bodyclose    # Checks whether HTTP response body is closed successfully
    - containedctx # Linter that detects struct contained context.Context field
    - contextcheck # Check the function whether use a non-inherited context
    - cyclop       # Checks function and package cyclomatic complexity
    - dupl         # Tool for code clone detection
    - durationcheck # Check for two durations multiplied together
    - errname      # Checks that sentinel errors are prefixed with the Err and error types are suffixed with the Error
    - errorlint    # Errorlint is a linter for that can be used to find code that will cause problems with the error wrapping scheme
    # execinquery - removed as it's not available in current golangci-lint
    - exhaustive   # Check exhaustiveness of enum switch statements
    - copyloopvar  # Checks for pointers to enclosing loop variables (replacement for exportloopref)
    - forbidigo    # Forbids identifiers
    - funlen       # Tool for detection of long functions
    - gochecknoglobals # Check that no global variables exist
    - gochecknoinits   # Checks that no init functions are present in Go code
    - gocognit     # Computes and checks the cognitive complexity of functions
    - goconst      # Finds repeated strings that could be replaced by a constant
    - gocritic     # Provides diagnostics that check for bugs, performance and style issues
    - gocyclo      # Computes and checks the cyclomatic complexity of functions
    - godox        # Tool for detection of FIXME, TODO and other comment keywords
    # gofumpt is a formatter, not a linter - use it separately
    - goheader     # Checks is file header matches to pattern
    # goimports is a formatter, not a linter - use it separately
    - mnd          # An analyzer to detect magic numbers (replacement for gomnd)
    - gomoddirectives # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod
    - gomodguard   # Allow and block list linter for direct Go module dependencies
    - goprintffuncname # Checks that printf-like functions are named with f at the end
    - gosec        # Inspects source code for security problems
    - lll          # Reports long lines
    - loggercheck  # Checks key value pairs for common logger libraries (kitlog,klog,logr,zap)
    - makezero     # Finds slice declarations with non-zero initial length
    - mirror       # Reports wrong mirror patterns of bytes/strings usage
    - misspell     # Finds commonly misspelled English words in comments
    - nakedret     # Finds naked returns in functions greater than a specified function length
    - nestif       # Reports deeply nested if statements
    - nilerr       # Finds the code that returns nil even if it checks that the error is not nil
    - nilnil       # Checks that there is no simultaneous return of nil error and an invalid value
    - noctx        # Noctx finds sending http request without context.Context
    - nolintlint   # Reports ill-formed or insufficient nolint directives
    - nonamedreturns # Reports all named returns
    - nosprintfhostport # Checks for misuse of Sprintf to construct a host with port in a URL
    - predeclared  # Find code that shadows one of Go's predeclared identifiers
    - promlinter   # Check Prometheus metrics naming via promlint
    - reassign     # Checks that package variables are not reassigned
    - revive       # Fast, configurable, extensible, flexible, and beautiful linter for Go
    - rowserrcheck # Checks whether Err of rows is checked successfully
    - sqlclosecheck # Checks that sql.Rows and sql.Stmt are closed
    # stylecheck is deprecated - functionality moved to staticcheck
    # tenv - removed as it's not available in current golangci-lint
    - testableexamples # Linter checks if examples are testable (have an expected output)
    - testpackage  # Linter that makes you use a separate _test package
    - thelper      # Thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - tparallel    # Tparallel detects inappropriate usage of t.Parallel() method in your Go test codes
    - unconvert    # Remove unnecessary type conversions
    - unparam      # Reports unused function parameters
    - usestdlibvars # A linter that detect the possibility to use variables/constants from the Go standard library
    - wastedassign # Wastedassign finds wasted assignment statements
    - whitespace   # Tool for detection of leading and trailing whitespace

  # Disabled linters (can be enabled if needed):
  # - deadcode     # Finds unused code [replaced by unused]
  # - depguard     # Go linter that checks if package imports are in a list of acceptable packages
  # - dogsled      # Checks assignments with too many blank identifiers (e.g. x, _, _, _, := f())
  # - gci          # Gci controls golang package import order and makes it always deterministic
  # - godot        # Check if comments end in a period
  # - golint       # Golint differs from gofmt. Gofmt reformats Go source code, whereas golint prints out style mistakes [deprecated]
  # - gomodguard   # Allow and block list linter for direct Go module dependencies
  # - interfacer   # Linter that suggests narrower interface types [deprecated]
  # - maligned     # Tool to detect Go structs that would take less memory if their fields were sorted [deprecated, replaced by fieldalignment]
  # - prealloc     # Finds slice declarations that could potentially be preallocated
  # - scopelint    # Scopelint checks for unpinned variables in go programs [deprecated, replaced by exportloopref]
  # - structcheck  # Finds unused struct fields [replaced by unused]
  # - varcheck     # Finds unused global variables and constants [replaced by unused]
  # - wrapcheck    # Checks that errors returned from external packages are wrapped
  # - wsl          # Whitespace Linter - Forces you to use empty lines!

# Issues configuration
issues:
  # List of regexps of issue texts to exclude
  exclude:
    # Exclude some lints that are not important for this project
    - "Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*print(f|ln)?|os\\.(Un)?Setenv). is not checked"
    - "func name will be used as test\\.Test.* by other packages, and that stutters; consider calling this"
    - "(comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)"
    - "should have a package comment, unless it's in another file for this package"

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - funlen
        - goconst
        - gocognit
        - scopelint
        - lll

    # Exclude known linters from partially hard-to-fix issues
    - linters:
        - golint
      text: "exported"

    # Exclude shadow checking on the variable named err
    - linters:
        - govet
      text: 'shadow: declaration of "err"'

    # Exclude lll issues for long lines with go:generate
    - linters:
        - lll
      source: "^//go:generate "

  # Independently of option `exclude` we use default exclude patterns,
  # it can be disabled by this option
  exclude-use-default: false
  
  # If set to true exclude and exclude-rules regular expressions become case sensitive
  exclude-case-sensitive: false

  # The list of ids of default excludes to include or disable
  include:
    - EXC0002 # disable excluding of issues about comments from golint
    - EXC0003 # disable excluding of issues about comments from revive
    - EXC0004 # disable excluding of issues about comments from gocritic
    - EXC0005 # disable excluding of issues about comments from staticcheck
    - EXC0011 # disable excluding of issues about missing package comment
    - EXC0012 # disable excluding of issues about missing function comment
    - EXC0013 # disable excluding of issues about missing const comment
    - EXC0014 # disable excluding of issues about missing var comment
    - EXC0015 # disable excluding of issues about missing type comment

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, e.g. only new issues in diff
  new: false

  # Show only new issues created after git revision `REV`
  new-from-rev: ""

  # Show only new issues created in git patch with set file path
  new-from-patch: ""

  # Fix found issues (if it's supported by the linter)
  fix: false

# severity:
#   # Set the default severity for issues
#   default-severity: error
#   
#   # Set different severity for specific linters
#   rules:
#     - linters:
#         - dupl
#       severity: info
#     - linters:
#         - gocritic
#       severity: info
#     - linters:
#         - lll
#       severity: warning